
#include <iostream>
using namespace std;

int dp[100 + 1][100 + 1];
int knapsack(int weights[], int values[], int n, int capacity) 
{
    for (int i = 0; i <= n; i++) 
    {
        dp[i][0] = 0;
    }
    for (int j = 0; j <= capacity; j++) 
    {
        dp[0][j] = 0;
    }

    for (int i = 1; i <= n; i++) 
    {
        for (int j = 1; j <= capacity; j++) 
        {
            if (weights[i - 1] > j) 
            {
                dp[i][j] = dp[i - 1][j];
            } else 
            {
                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - weights[i - 1]] + values[i - 1]);
            }
        }
    }

    return dp[n][capacity];
}
void products(int weights[], int values[], int n, int capacity)
{
    
    int i =n, j= capacity;
    
    while(i>0 && j>=0)
    {
        if (dp[i-1][j]== dp[i][j])
        {
            cout<<i<<" 0"<<endl;
            i--;
        }
        else
        {
            cout<<i<<" 1"<<endl;
            j= j - weights[i];
            i--;
        }
    }
}

int main() 
{   
    //int n=4;
    int weights[] = {0,2,3,5,6};
    int values[] = {0,3,4,6,7};
    int n = sizeof(weights) / sizeof(weights[0]);
    int capacity = 8;

    int maxValue = knapsack(weights, values, n, capacity);
    cout << "Maximum value: " << maxValue << endl;
    
    products(weights, values, n, capacity);
    return 0;
}
